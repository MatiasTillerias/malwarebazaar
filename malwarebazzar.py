import requests
import argparse
import json
from tabulate import tabulate
from sys import exit

#### args config
parser = argparse.ArgumentParser(description='Malware Bazaar CLI Interface')
parser.add_argument("--hash", help="SHA256 hash of a malware")
parser.add_argument("-f", "--filter", help="Look for malware based on tags ")
parser.add_argument("-l", "--last", help="Look for the malwere uploaded in the last hour", action="store_true" )

args = parser.parse_args()

### base requests

def reqBase( query):
    url = "https://mb-api.abuse.ch/api/v1/"
    r = requests.post(
            url,
            data=query,
            )
    return r.content


def createTable(table):
    return tabulate(table, headers=["File Name", "Hash SHA256", "Reporter", "First Seen"], tablefmt="fancy_grid")



def getLastSamples():
    quey = {
            "query": "get_recent",
            "selector": "time" # It will look for all the malware uploaded inthe las hour
            }
    r = reqBase(quey)
    r = json.loads(str(r.decode()))
    #print(r["data"])
    GeneralMalwareInfo = []
    for i in r["data"]:
        malwereInfo = []
        malwereInfo.append(i["file_name"])
        malwereInfo.append(i["sha256_hash"])
        malwereInfo.append(i["reporter"])
        malwereInfo.append(i["first_seen"])
        GeneralMalwareInfo.append(malwereInfo)
    print(f"List of malware uoloades in the last hour\n")
    print(createTable(GeneralMalwareInfo))

def getByTag():
    quey = {
            "query": "get_taginfo",
            "tag": args.filter,
            "limit": "20"
            }
    r = reqBase(quey)
    r = json.loads(str(r.decode()))
    GeneralMalwareInfo = []
    for i in r["data"]:
        malwereInfo = []
        malwereInfo.append(i["file_name"])
        malwereInfo.append(i["sha256_hash"])
        malwereInfo.append(i["reporter"])
        malwereInfo.append(i["first_seen"])
        GeneralMalwareInfo.append(malwereInfo)
    print(f"List of malware with the {args.filter} tag \n")
    print(createTable(GeneralMalwareInfo))
def getByHash():
    query = {
            "query" : "get_file",
            "sha256_hash": args.hash
            }
    malware = reqBase(query)
    m = open("malware.zip", "wb")
    m.write(malware)
    m.close()
    print("[*] malware downloaded and saveed as malware.zip, the file is protected by the password \"infected\"")

def banner():
    banner = '''
 ███▄ ▄███▓ ▄▄▄       ██▓     █     █░ ▄▄▄       ██▀███  ▓█████  ▄▄▄▄    ▄▄▄      ▒███████▒ ▄▄▄      ▄▄▄       ██▀███      ▄████▄   ██▓     ██▓
▓██▒▀█▀ ██▒▒████▄    ▓██▒    ▓█░ █ ░█░▒████▄    ▓██ ▒ ██▒▓█   ▀ ▓█████▄ ▒████▄    ▒ ▒ ▒ ▄▀░▒████▄   ▒████▄    ▓██ ▒ ██▒   ▒██▀ ▀█  ▓██▒    ▓██▒
▓██    ▓██░▒██  ▀█▄  ▒██░    ▒█░ █ ░█ ▒██  ▀█▄  ▓██ ░▄█ ▒▒███   ▒██▒ ▄██▒██  ▀█▄  ░ ▒ ▄▀▒░ ▒██  ▀█▄ ▒██  ▀█▄  ▓██ ░▄█ ▒   ▒▓█    ▄ ▒██░    ▒██▒
▒██    ▒██ ░██▄▄▄▄██ ▒██░    ░█░ █ ░█ ░██▄▄▄▄██ ▒██▀▀█▄  ▒▓█  ▄ ▒██░█▀  ░██▄▄▄▄██   ▄▀▒   ░░██▄▄▄▄██░██▄▄▄▄██ ▒██▀▀█▄     ▒▓▓▄ ▄██▒▒██░    ░██░
▒██▒   ░██▒ ▓█   ▓██▒░██████▒░░██▒██▓  ▓█   ▓██▒░██▓ ▒██▒░▒████▒░▓█  ▀█▓ ▓█   ▓██▒▒███████▒ ▓█   ▓██▒▓█   ▓██▒░██▓ ▒██▒   ▒ ▓███▀ ░░██████▒░██░
░ ▒░   ░  ░ ▒▒   ▓▒█░░ ▒░▓  ░░ ▓░▒ ▒   ▒▒   ▓▒█░░ ▒▓ ░▒▓░░░ ▒░ ░░▒▓███▀▒ ▒▒   ▓▒█░░▒▒ ▓░▒░▒ ▒▒   ▓▒█░▒▒   ▓▒█░░ ▒▓ ░▒▓░   ░ ░▒ ▒  ░░ ▒░▓  ░░▓  
░  ░      ░  ▒   ▒▒ ░░ ░ ▒  ░  ▒ ░ ░    ▒   ▒▒ ░  ░▒ ░ ▒░ ░ ░  ░▒░▒   ░   ▒   ▒▒ ░░░▒ ▒ ░ ▒  ▒   ▒▒ ░ ▒   ▒▒ ░  ░▒ ░ ▒░     ░  ▒   ░ ░ ▒  ░ ▒ ░
░      ░     ░   ▒     ░ ░     ░   ░    ░   ▒     ░░   ░    ░    ░    ░   ░   ▒   ░ ░ ░ ░ ░  ░   ▒    ░   ▒     ░░   ░    ░          ░ ░    ▒ ░
       ░         ░  ░    ░  ░    ░          ░  ░   ░        ░  ░ ░            ░  ░  ░ ░          ░  ░     ░  ░   ░        ░ ░          ░  ░ ░  
                                                                      ░           ░                                       ░                    
@author Matías (1Fy53c) Tillerias

Just a shiti code to interact with the MalwareBazzar malware repository 


    '''
    print(banner)


def main():
    banner()
    if args.filter:
        getByTag()
        exit()
    if args.hash:
        getByHash()
        exit()
    if args.last:
        getLastSamples()

if __name__ == "__main__":
    main()
